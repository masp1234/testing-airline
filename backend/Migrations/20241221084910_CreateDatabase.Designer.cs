// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Database;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241221084910_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("airlines", (string)null);
                });

            modelBuilder.Entity("backend.Models.Airplane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AirplanesAirlineId")
                        .HasColumnType("int")
                        .HasColumnName("airplanes_airline_id");

                    b.Property<int>("BusinessClassSeats")
                        .HasColumnType("int")
                        .HasColumnName("business_class_seats");

                    b.Property<int>("EconomyClassSeats")
                        .HasColumnType("int")
                        .HasColumnName("economy_class_seats");

                    b.Property<int>("FirstClassSeats")
                        .HasColumnType("int")
                        .HasColumnName("first_class_seats");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AirplanesAirlineId" }, "airline_id_idx");

                    b.ToTable("airplanes", (string)null);
                });

            modelBuilder.Entity("backend.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CityId" }, "city_id_idx");

                    b.ToTable("airports", (string)null);
                });

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmationNumber")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("confirmation_number");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id_idx");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("backend.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("state_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StateId" }, "state_id_idx");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("backend.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalPort")
                        .HasColumnType("int")
                        .HasColumnName("arrival_port");

                    b.Property<int>("BusinessClassSeatsAvailable")
                        .HasColumnType("int")
                        .HasColumnName("business_class_seats_available");

                    b.Property<DateTime>("CompletionTime")
                        .HasColumnType("datetime")
                        .HasColumnName("completion_time");

                    b.Property<int>("DeparturePort")
                        .HasColumnType("int")
                        .HasColumnName("departure_port");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime")
                        .HasColumnName("departure_time");

                    b.Property<int>("EconomyClassSeatsAvailable")
                        .HasColumnType("int")
                        .HasColumnName("economy_class_seats_available");

                    b.Property<int>("FirstClassSeatsAvailable")
                        .HasColumnType("int")
                        .HasColumnName("first_class_seats_available");

                    b.Property<string>("FlightCode")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("flight_code");

                    b.Property<int>("FlightsAirlineId")
                        .HasColumnType("int")
                        .HasColumnName("flights_airline_id");

                    b.Property<int>("FlightsAirplaneId")
                        .HasColumnType("int")
                        .HasColumnName("flights_airplane_id");

                    b.Property<string>("IdempotencyKey")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("idempotency_key");

                    b.Property<int?>("Kilometers")
                        .HasMaxLength(45)
                        .HasColumnType("int")
                        .HasColumnName("kilometers");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("TravelTime")
                        .HasColumnType("int")
                        .HasColumnName("travel_time");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArrivalPort" }, "arrival_port_idx");

                    b.HasIndex(new[] { "DeparturePort" }, "departure_port_idx");

                    b.HasIndex(new[] { "FlightsAirlineId" }, "flights_airline_id_idx");

                    b.HasIndex(new[] { "FlightsAirplaneId" }, "flights_airplane_id");

                    b.ToTable("flights", (string)null);
                });

            modelBuilder.Entity("backend.Models.FlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price_multiplier");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("flight_classes", (string)null);
                });

            modelBuilder.Entity("backend.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("passengers", (string)null);
                });

            modelBuilder.Entity("backend.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("code");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("backend.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightClassId")
                        .HasColumnType("int")
                        .HasColumnName("tickets_class_id");

                    b.Property<int>("FlightId")
                        .HasColumnType("int")
                        .HasColumnName("flight_id");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int")
                        .HasColumnName("passenger_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ticket_number");

                    b.Property<int>("TicketsBookingId")
                        .HasColumnType("int")
                        .HasColumnName("tickets_booking_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("FlightClassId");

                    b.HasIndex(new[] { "FlightId" }, "flight_id_idx");

                    b.HasIndex(new[] { "PassengerId" }, "passenger_id_idx");

                    b.HasIndex(new[] { "TicketsBookingId" }, "tickets_booking_id_idx");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("backend.Models.Airplane", b =>
                {
                    b.HasOne("backend.Models.Airline", "AirplanesAirline")
                        .WithMany("Airplanes")
                        .HasForeignKey("AirplanesAirlineId")
                        .IsRequired()
                        .HasConstraintName("airplanes_airline_id");

                    b.Navigation("AirplanesAirline");
                });

            modelBuilder.Entity("backend.Models.Airport", b =>
                {
                    b.HasOne("backend.Models.City", "City")
                        .WithMany("Airports")
                        .HasForeignKey("CityId")
                        .HasConstraintName("city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.City", b =>
                {
                    b.HasOne("backend.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("state_id");

                    b.Navigation("State");
                });

            modelBuilder.Entity("backend.Models.Flight", b =>
                {
                    b.HasOne("backend.Models.Airport", "ArrivalPortNavigation")
                        .WithMany("FlightArrivalPortNavigations")
                        .HasForeignKey("ArrivalPort")
                        .IsRequired()
                        .HasConstraintName("arrival_port");

                    b.HasOne("backend.Models.Airport", "DeparturePortNavigation")
                        .WithMany("FlightDeparturePortNavigations")
                        .HasForeignKey("DeparturePort")
                        .IsRequired()
                        .HasConstraintName("departure_port");

                    b.HasOne("backend.Models.Airline", "FlightsAirline")
                        .WithMany("Flights")
                        .HasForeignKey("FlightsAirlineId")
                        .IsRequired()
                        .HasConstraintName("flights_airline_id");

                    b.HasOne("backend.Models.Airplane", "FlightsAirplane")
                        .WithMany("Flights")
                        .HasForeignKey("FlightsAirplaneId")
                        .IsRequired()
                        .HasConstraintName("flights_airplane_id");

                    b.Navigation("ArrivalPortNavigation");

                    b.Navigation("DeparturePortNavigation");

                    b.Navigation("FlightsAirline");

                    b.Navigation("FlightsAirplane");
                });

            modelBuilder.Entity("backend.Models.Ticket", b =>
                {
                    b.HasOne("backend.Models.FlightClass", "FlightClass")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightClassId")
                        .IsRequired()
                        .HasConstraintName("tickets_class_id");

                    b.HasOne("backend.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .IsRequired()
                        .HasConstraintName("flight_id");

                    b.HasOne("backend.Models.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerId")
                        .IsRequired()
                        .HasConstraintName("passenger_id");

                    b.HasOne("backend.Models.Booking", "TicketsBooking")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketsBookingId")
                        .IsRequired()
                        .HasConstraintName("tickets_booking_id");

                    b.Navigation("Flight");

                    b.Navigation("FlightClass");

                    b.Navigation("Passenger");

                    b.Navigation("TicketsBooking");
                });

            modelBuilder.Entity("backend.Models.Airline", b =>
                {
                    b.Navigation("Airplanes");

                    b.Navigation("Flights");
                });

            modelBuilder.Entity("backend.Models.Airplane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("backend.Models.Airport", b =>
                {
                    b.Navigation("FlightArrivalPortNavigations");

                    b.Navigation("FlightDeparturePortNavigations");
                });

            modelBuilder.Entity("backend.Models.Booking", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("backend.Models.City", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("backend.Models.Flight", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("backend.Models.FlightClass", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("backend.Models.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("backend.Models.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
